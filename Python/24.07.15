# 24-07-15

## 프로그래밍이란?

### 프로그램: 명령어의 집합

### 프로그래밍의 핵심

새 연산을 정의하고 조합해 유용한 작업을 수행하는 것

→ 문제를 해결하는 매우 강력한 방법

## 프로그래밍 언어

컴퓨터에게 작업을 지시하고 문제를 해결하는 도구

## Python

- Python을 배우는 이유
    - 쉽고 간결한 문법
        
        읽기 쉽고 쓰기 쉬운 문법을 가지고 있어 쉽게 배우고 활용 할 수 있음
        
    - 파이썬 커뮤니티의 지원
        
        세계적인 규모의 풍부한 온라인 포럼 및 커뮤니티 생태계
        
    - 광범위한 응용 분야
        
        웹 개발, 데이터 분석, 인공지능, 자동화 스크립트 등 다양한 분야에서 사용
        
- 알고리즘에 구현에 유리한 Python
    - 직관적인 문법
        
        복잡한 논리 구조의 알고리즘을 이해하고 구현하기에 쉬움
        
    - 강력한 표준 라이브러리
        
        다양한 알고리즘 구현에 필요한 도구를 제공
        
    - 빠른 프로토타이핑
        
        알고리즘을 빠르게 테스트하고 수정할 수 있음
        

## 파이썬의 작동 원리

- 컴퓨터는 기계어로 소통하기 때문에 사람이 기계어를 직접 작성하기 어려움
    
    
- 인터프리터가 사용자의 명령어를 운영체제가 이해하는 언어로 바꿈
    - 훨씬 더 사용하기 쉽고 운영체제간 이식도 쉬움
- 파이썬 인터프리터를 사용하는 2가지 방법
    - Shell이라는 프로그램으로 한 번에 한 명령어 씩 입력해서 실행
    - 확장자가 .py인 파일에 작성된 파이썬 프로그램을 실행

## 표현식

값으로 평가될 수 있는 코드 조각

## 값

표현식이 평가된 결과

ex) 3+5 표현식 3 + 5, 값: 8

표현식이 평가되어 값이 반환됨

## 평가

표현식을 실행하여 값을 얻는 과정

→ 표현식을 순차적으로 평가하여 프로그램의 동작을 결정

## 문장

실행 가능한 동작을 기술하는 코드(조건문, 반복문,함수 정의 등)

## 타입

변수나 값이 가질 수 있는 테이터의 종류의 의미

→ 어떤 종류의 데이터인지, 어떻게 해석되고 처리되어야 하는 지를 정의

## 1          +     3

값(피연산자)        연산자

## 데이터 타입

- Numeric Type
    
    int(정수),  float(실수), complex(복소수)
    
- Sequence Types
    
    list,  tuple, range
    
- Text Sequence Types
    
    str
    
- Non-Sequence Types
    
    set, dict
    
- 기타
    
    boolean, None, Functions
    

데이터 타입에 맞는 연산을 수행하기 때문에 중요하다.

## 산술 연산자

| 기호 | 연산자 |
| --- | --- |
| - | 음수 부호 |
| + | 덧셈 |
| - | 뺄셈 |
| * | 곱셈 |
| / | 나눗셈 |
| // | 정수 나눗셈(몫) |
| % | 나머지 |
| ** | 지수(거듭제곰) |

## 연산자 우선순위

| 우선 순위  | 연산자              | 연산 |
| --- | --- | --- |
| 높음 | ** | 지수 |
|  | - | 음수 부호 |
|  | *, /, //, % | 곱셈,나눗셈,정수 나눗셈, 나머지 |
| 낮음 | +,- | 덧셈,뺼셈 |

## 연산자 우선순위 예시

```jsx
# -16
-2 ** 4

# -16
-(2 ** 4)

#16
(-2) ** 4
```

## 변수가 메모리 값이 저장되는 법

## 변수

값을 저장하기 위한 이름

## 변수 할당

표현식을 통해 변수에 값을 저장

```python
degrees = 36.5
```

할당문

“변수 degrees에 값 36.5를 할당했다.”

```python
degrees = 'abc'
```

재할당

“변수 degrees에 값 ‘abc’를 재할당했다.

- 할당문
    
    ```python
    variable = expression
    ```
    
    1. 할당 연산자 오른쪽에 있는 표현식을 평가해서 값(메모리 주소)을 생성
    2. 값의 메모리 주소를 ‘=’ 왼쪽에 있는 변수에 저장
- 존재하지 않는 변수라면
    
    새 변수를 생성
    
- 깁존에 존재했던 변수라면
    
    기존 변수를 재사용해서 변수에 들어 있는 메모리 주소를 변경
    

## 변수, 값 그리고 메모리

- 거리에 집 주소가 있듯이 메모리의 모든 위치에는 그위치를 고유하게 식별하는 메모리 주소가 존재
- 객체: 타입을 갖는 메모리 주소 내 값
- 값이 들어있는 상자
- 변수는 그 변수가 참조하는 객체의 메모리 주소를 가짐
- 변수 degree는 값 36.5를 참조

## 변수

값을 저장하기 위한 이름

→ 값을 참조하기 위한 이름

### 변수에 재할당

```python
number = 10
double = 2 * number
print(double) #20

number = 5
print(double) #20
```

### 변수명 규칙

- 영문 알파벳, 언더스코어(_), 숫자로 구성
- 숫자로 시작할 수 없음
- 대소문자로 구분
- 아래 키워드는 파이썬의 내부 예약어로 사용할 수 없음

## 데이터 타입

### Data Types

값의 종류와 그 값에 적용 가능한 연산과 동작을 결정하는 속성

- 데이터 타입이 필요한 이유
    
    값들을 구분하고, 어떻게 다뤄야 하는지를 알 수 있음
    
    요리 재료마다 특정한 도구가 필요하듯이 각 데이터 타입 값들도 각자에게 적합한 도구를 가짐
    
    타입을 명시적으로 지정하면 코드를 읽는 사람이 변수의 의도를 더 쉽게 이해할 수 있고, 잘못된 데이터 타입으로 인한 오류를 미리 예방
    

### Numeric Types

- int
    
    정수 자료형 
    
    정수를 표현하는 자료형
    
    ```python
    a = 10
    b = 0
    c = -5
    ```
    

진수 표현

- 2진수: 0b
- 8진수: 0o
- 16진수:0x
- float
    
    실수 자료형
    
    실수를 표현하는 자료형
    
    - 프로그래밍 언어에서 float는 실수에 대한 근삿값
        
        유한 정밀도
        
        컴퓨터 메모리 용량이 한정돼 있고 한 숫자에 대해 저장하는 용량이 제한됨
        
        0.666666666666과 1.6666666666667a은 제한된 양의 메모리에 저장할 수 있는 2/3과 5/3과 가장 가까운 값
        
    - 실수 연산시 주의사항
        
        컴퓨터는 2진수를 사용, 사람은 10진법을 사용
        
        이때 10진수는 0.1은 2진수로 표현하면 0.0001100110011001100110 같이 무한대로 반복됨
        
        무한대 숫자를 그대로 저장할 수 없어서 사람이 사용하는 10진법의 근삿값만 표시
        
        0.1의 경우 3602879701896397/2**55이며 0.1에 가깝지만 정확히 동일하지 않음
        
        이런 증상을 부동소수점 에러라도함
        
        - 부동소수점 에러
            
            컴퓨터가 실수를 표현하는 방식으로 인해 발생하는 작은 옴차
            
            원인
            
            → 실수를 2진수로 변환하는 과정에서 발생하는 근사치 표현
            
            대표적으로 decimal모듈을 사용해 정확성을 보장하는 에러 해결책
            
    - 지수 표현 방식
        
        e 또는 E를 사용한 지수 표현
        

### Sequence Types

- 여러 개의 값들을 순서대로 나열하여 저장하는 자료형(str, list, tuple, range)
- Sequence Types 특징
    1. 순서
    - 값들이 순서대로 저장(정렬X)
    1. 인덱싱
    - 각 값에 고유한 인덱스를 가지고 있으며, 인덱스를 사용하여 특정 위치의 값을 선택하거나 수정할 수 있음
    1. 슬라이싱
    - 인덱스 범위를 조절해 부분적인 값을 추출할 수 있음
    1. 길이
    - len()함수를 사용하여 저장된 값의 개수(길이)를 구할 수 있음
    1. 반복
    - 반복문을 사용하여 저장된 값들을 반복적으로 처리할 수 있음
- str(문자열)
    
    문자들의 순서가 있는 변경 불가능한 시퀀스 자료형
    
    문자열은 단일 문자나 여러 문자의 조합으로 이루어짐
    
    작은 따옴표(’) 또는 큰따옴표(”)로 감싸서 표현
    
    - 중첩 따옴표
        - 따옴표 안에 따옴표를 표현할 경우
            
            작은 따옴표가 들어 있는 경우는 큰따옴표로 문자열 생성
            
            큰 따옴표가 들어 있는 경우는 작은 따옴표로 문자열 생성
            
    - Escape sequence
        
        역슬래시(\) 뒤에 특정 문자가 와서 특수한 기능을 하는 문자 조합
        
        파이썬의 일반적인 문법 규칙을 잠시 탈출한다는 의미
        
        | 예약 문자 | 내용 |
        | --- | --- |
        | \n | 줄 바꿈 |
        | \t | 탭 |
        | \\ | 백슬래시 |
        | \’ | 작은 따옴표 |
        | \” | 큰 따옴표 |
    - String Interpolation
        
        문자열 내에 변수나 표현식을 삽입하는 방법
        
        - f-string
            
            문자열에 f또는 F접두어를 붙이고 표현식을 {expression}로 작성하는 문법
            
            문자열에 파이썬 표현식의 값을 삽입할 수 있음
            
        - 문자열의 시퀀스 특징
            
            ```python
            my_str = "hello"
            
            # 인덱싱
            print(my_str[1]) #e
            
            #슬라이싱
            print(my_str[2:4]) #ll
            
            #길이
            print(len(my_str)) #5
            ```
            
    
- 인덱스
    
    시퀀스 내의 값들에 대한 고유한 번호로 각 값의 위치를 식별하는데 사용되는 숫자
    
- 슬라이싱
    
    시퀀스의 일부분을 선택하여 추출하는 작업
    
    → 시작 인덱스와 끝 인덱스를 지정하여 해당 범위의 값을 포함하는 새로운 시퀀스 생성
    
    ```python
    my_str[2:4]
    
    my_str[:3]
    
    my_str[3:]
    
    my_str[0:5:2]
    
    my_str[::-1]
    ```
    
- 문자열은 불변 (변경 불가) →문자열 자체가 메모리안에 같이 들어가 있어서 일부만 수정 불가

---

## 참고

- Style Guide
    
    코드의 일관성과 가독성을 향상 시키기 위한 규칙과 권장 사항들의 모음
    
    - 파이썬 style Guide
        
        변수명은 무엇을 위한 변수인지 직관적인 이름을 가져야 함
        
        공백 4칸을 사용하여 코드 블럭 들여쓰기
        
        한줄의 길이는 79자로 제한하며,길어진 경우 줄 바꿈을 사용
        
        문자와 밑줄(*)을 사용하여 함수, 변수, 속성의 이름을 작성(snake*_case)
        
        함수 정의나 클래스 정의 들의 블록 사이에는 빈 줄을 
        
        추가
        

주석

- 프로그램 코드 내에 작성되는 설명이나 메모
- 인터프리터에 의해 실행되지 않음

```python
#이것은 주석입니다.
"""
주석이다
"""

#단축키 ctrl +  /
```

코드의 특정 부분을 설명하거나 임시로 코드를 비활성화 할 때

코드를 이해하거나 문서화하기 위해

다른 개발자나 자신에게 코드의 의도나 동작을 설명하는 데 도움

Python Tutor

파이썬 프로그램이 어떻게 실행되는지  도와주는 시각화 도우미

pythontutor.com/

---

구글링

- 검색어
    - 영어로 검색하기 하지만 완벽한 문장이 아니어도 좋음
    - 내기가 해결하고자 하는 문제에 대한 키워드들을 명확히 작성하기
- 신뢰할 수 있는 출처 활용
    
    공식문서: 프로그래맹 언어의 공식문서와 라이브러리 문서를 우선적으로 참고
    
    커뮤니티 사이트: stack Overflow, github issue등의 개발자 커뮤니티
    
- AI
    
    AI가 제시하는 솔루션이 좋은지 나쁜지 판단하기 어려움
    
    기본개념을 학습하는 것을 소홀히 하지 말고 다양한 문제를 스스로 해결해보려는 경험을 쌓는것이 필요
    
    개발자의 가치는 논리적 사고력과 문제 해결 능력
    
    문제 해결 과정에서 만나는 수많은 실수와 버그들을 마주하고, 해결하기 위해 고민하는  시간 속에서 깊은 학습과 진정한 성장이 이루어짐
    
    손쉽게 어려움을 없애주는  AI의 해결책에 의존하지 말 것
